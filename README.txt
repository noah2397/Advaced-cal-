터미널에서 쓰이는 달력 커맨드 "cal"의 기능을 발전시킨 프로그램 cal.c 개발
==================================
1) 기능 설명
2) 구현 방식
3) 환경요소 분석, 코드 줄 분석, 사용된 기술 분석
4) 참여한 사람
==================================
1)기능 설명

- 프로그램을 실행하면(./cal), 현재 달에 대한 정보를 lcurses을 사용해 나타냄
- 프로그램 초기화면에 114를 입력하고 엔터키를 누르면 도움말 정보가 아래쪽에 출력됨
- 프로그램 초기화면에서 0 + (enter) : 화면이 저번달로 넘어감
- 프로그램 초기화면에서 1 + (enter) : 화면이 다음달로 넘어감
- 프로그램 초기화면에서 2 + (enter) : 현재 나타내는 달에 대한 일정 등록 화면이 나타남
- 2 + (enter)을 한 상태 : 등록하고 싶은 일정을 입력하고, (enter)을 누르면 현재 달이 표시되면서 일정이 아래쪽에 출력됨
- 프로그램 초기화면에서 3 + (enter) : 현재달을 기준으로 몇달전으로 넘어갈지 입력받는 화면이 나타남
- 3 + (enter)을 한 상태 : 이동하고싶은 달만큼 숫자를 입력한 뒤(ex : 12이면은 1년 전으로 가겠다는 뜻), (enter)을 누르면 해당하는 달이 표시됨
- 프로그램 초기화면에서 4 + (enter) : 3 + (enter)의 반대 기능(몇달후로 이동)
- 프로그램 초기화면에서 5 + (enter) : 일정 삭제 화면이 띄워짐
- 5 + (enter)을 한 상태 : 몇번째 레코드를 지울지 숫자를 입력하고 (enter)을 누르면, 해당하는 달의 일정이 출력될때, 지정한 레코드의 일정이 삭제되어 나타남
- 프로그램 초기화면에서 6 + (enter) : 년,월,일을 입력하는 화면이 표시됨
- 6 + (enter)을 한 상태 : 년월일을 입력하고, (enter)을 누르면 현재 시간과 얼마나 차이나는지 출력해줌, 이 상태에서 (enter)을 누르면 다시 초기 화면으로 돌아감
- 프로그램 초기화면에서 7 + (enter) : 시, 분, 초로 돌아가는 아날로그 시계와 디지털 시계 출력, 1초마다 시간에 영향을 받아서 화면이 바뀌어지게 됨
- 7 + (enter)을 한 상태 : SIGQUIT(Ctrl + \)을 입력하면 초기화면으로 돌아감
- SIGINT를 프로세스에 보낼 시, 종료문이 나오고, q나 quit를 치면 프로그램 종료
==================================
2) 구현 방식

-tm이라는 구조체를 사용하여 현재 시간을 기준으로 0년도부터 9999년도까지의 날짜를 모두 나타낼 수 있도록 설계함
-tm구조체의 거의 대부분의 원소(tm_year, tm_month, tm_day, tm_mday ,tm_hour ,tm_min ,tm_sec)를 사용함
1. 처음에 받아온 현재 시각을 기준으로, tm_day(일자)가 1이 될때까지 tm_mday(요일)도 계속 빼줌으로써, 해당월의 1일이 무슨 요일인지 파악함
2. 윤년과 2월, 각 월마다의 일 수도 고려해서 해당월의 달력을 출력함(lcurses사용)
3. 다음달과 지난달을 출력하기 위해서, 현재시간이 초(sec)단위 값으로 저장되어 있는 변수에 대해서 각각 처리함
3_1. 다음달을 적용할때는, 현재 일수가 바뀌지 않아야 하므로, 현재 일 수에 다음달의 일 수를 더하게 됨(ex : 오늘이 15일이고, 만약 12월 달이면, 1월달로 일 수 차이없이 가기 위해서는 다음달(1월)의 일수 (30일)만큼 더해야 15일이라는 숫자가 고정되게 바뀌게 됨)
더할 때는 하루가 86400초이므로 86400*(다음달의 일 수)를 더한 값을 토대로 달력을 다시 구성하게 됨
3_2. 저번달을 적용할 때는, 현재 달의 일 수(ex: 12월이니까 31일)을 빼줘야 함. 따라서 86400*(현재달의 일 수)를 빼준 값을 토대로 달력을 다시 구성하게 됨-(기능 0,1설명 완료)
4. 큰 단위로 달이나 년으로 넘어가게 하기 위해서 3번에 쓰였던 코드들을 함수(모듈)로 변환해서 특정 숫자를 입력하고 enter를 할 때, for문을 사용하여 입력받은 달만큼 이동하게 됨-(기능 3,4 설명 완료)
5. 일정 관리를 하기 위해서, 일정 정보를 담을 수 있는 file descriptor와 구조체(date,data)를 선언한다. 사용자가 값을 입력하면 파일을 fopen으로 열고, fwrite로 구조체의 크기만큼 써줌(fwrite(&insert, sizeof(insert),1,input), schedule함수)
써주는 함수가 종료되고 초기화면으로 돌아가게 될때, 읽어오는 함수를 호출하여(fread사용) 현재 출력되는 년, 월에 맞는 데이터를 자동으로 걸러서 읽어오게 하여 화면과 같이 일정을 출력함(search함수) - (기능 2번 설명 완료)
6. 일정 삭제를 하기 위해서, 먼저 삭제할 레코드값을 기준으로 파일을 열고, fopen("read.txt","r+")모드로 연 다음, 해당 년월에 해당하는 레코드를 볼 때마다 카운터를 증가시키다가 이 카운터가 유저가 입력한 레코드값과 일치하게 되면, fseek를 통해서 삭제할 위치로 가서 fwrite로 쓰레기값을 넣어줌. 이렇게 될시, 해당 정보는 search()함수에서 인식이 불가능해 넘어가게 됨-(기능 5번 설명완료)
7. 날짜 계산기. 먼저 계산할 year, month, day를 순서대로 입력받은 뒤, tm 구조체의 tm_yday를 주로 이용하여 현재 날짜와의 차이를 계산. 입력받은 날짜와 현재 날짜 사이와의 차이에 따른 출력 형식은 간단한 if 문을 통해 구현.
8. 아날로그 시계를 구현할때 #include <windows.h>를 사용하여 Lineto()함수로 간단하게 작성 가능했지만, 윈도우 계열에서만 가능하고, 리눅스에서는 불가능하기에, 삼각함수를 사용. #include <math.h>를 불러와서 함수 sin,cos값을 각도 기준으로 나오는 값들을 이용해서 좌표계로 만들었으며, 시침, 분침, 초침은 각각 3600초, 60초, 1초가 지날때마다 업데이트 되도록 설계.(1초 지날때마다 time(NULL)을 사용해서 세개의 값을 업데이트)
여기서 쓰레드를 3개를 사용하여, 각각 시침, 분침, 초침을 길이에 맞게 출력하도록 설계. 
9. 8번에서 언급한 아날로그 시계 함수 구조는 다음과 같은데
while(1){
	...
	sleep(1);
	...
}
여기에서 sleep이 계속 유지가 되면서 나갈 방법을 signal handling함수를 호출해서 처리하기로 함. SIGQUIT를 프로세스에 보내게 되면, 전역변수 quit가 1로 값이 NULL이 아니게 되면서 자동으로 초기화면으로 돌아오도록 설계. 
10. 114같은 경우의 도움말 출력은 단순하게 lcurses로 구현.
11. SIGINT시그널을 프로세스에 보내면 시그널 핸들링 함수가 호출되어 종료를 도와줌
==========================================
3) 환경요소 분석, 코드 줄 분석, 사용된 기술 분석

OS: Ubuntu 18+ 
Language: C 
IDE: 텍스트 편집기

LOC(line of code) : 745, number of words : 1871, number of char : 16515

Basic system calls (open, read, write, close, …) : O
Fork: X
Signal handling, Time handling: O – (시그널 호출 함수, singal, sleep, usleep 사용)
File I/O: O – (일정 관리 기능에 사용됨 : fwrite, fread, fseek, fclose)
Inter-Process Communication (pipe or socket) etc: X
Makefile: O (attached)
Thread: O (아날로그 시계 구현에 사용됨)
README file: O (attached)
=========================================
4) 참여한 사람
명노아(2018110118 ,조장)
이주형(2018110975)
권진솔(2018110391)
